.type Var <: symbol
.type Method <: symbol
.type Operator <: symbol
.type Instruction <: symbol
.type MethodInv <: symbol
.type InsType <: symbol
.type Allocation <: symbol
.type FieldRef <: symbol
.type PAG_Node_Type = Var | Allocation | FieldRef
.type PAG_Edge = symbol
.type Attribute = symbol

.decl PAG_Node(meth:Method, ?node:PAG_Node_Type, ?t:symbol)
.output PAG_Node

.decl PAG(?method:Method,?t:PAG_Edge,?from_node: PAG_Node_Type, ?to_node:PAG_Node_Type)
.output PAG

.decl ObjectAttribute(?meth:Method, ?base:Var, ?attr:Attribute, ?con:symbol, ?ins:Instruction)
.output ObjectAttribute

.decl Interprocedural(s:symbol, ?from_meth:Method, ?from_var:Var, ?to_meth:Method, ?to_var:Var)
.output Interprocedural


// handle new heap objects
//ex: a = new Example
.decl AssignHeapAllocation(?instruction:Instruction, ?index:number, ?heap:Allocation, ?to_var:Var, ?inmethod:Method, ?linenumber:number)
.input AssignHeapAllocation(IO="file", filename="AssignHeapAllocation.facts", delimiter="\t")

.decl NormalHeap(all:Allocation, short:Allocation)
.input NormalHeap(IO="file", filename="NormalHeap.facts")

.decl SpecialMethodInvocation(?ins:Instruction, ?l:number, ?s:Method, ?var:Var,?m:Method)
.input SpecialMethodInvocation(IO="file", filename="SpecialMethodInvocation.facts", delimiter="\t")

PAG_Node(?method,?to_var,"Var"),
PAG_Node(?method,?heap_name, "HeapObject"),
PAG(?method,"AssignHeapAllocation",?heap_name,?to_var):-
    AssignHeapAllocation(?ins, _,?heap,?to_var, ?method,_ ),
    SpecialMethodInvocation(?ins,_,?init_meth,?to_var,?method),
    contains("init",?init_meth),
    NormalHeap(?heap,?heap_name).

// handle load object field references
// ex: a = f.b
.decl LoadInstanceField(?instruction:Instruction, ?index:number, ?to_var:Var, ?base:Var, ?attr:Attribute, ?method:Method)
.input LoadInstanceField(IO="file", filename="LoadInstanceField.facts", delimiter="\t")

PAG_Node(?method,?to_var, "Var"),
PAG_Node(?method, ?from_attr, "AttributeField"),
ObjectAttribute(?method, ?base, ?attr, ?from_attr,?ins),
PAG(?method, "LoadInstanceField", ?from_attr, ?to_var):-
    LoadInstanceField(?ins, _, ?to_var, ?base, ?attr , ?method),
    ?base_ex = cat(?base, "."),
    ?from_attr = cat(?base_ex, ?attr).

// handle store object field references
// ex: f.b = a
.decl StoreInstanceField(?instruction:Instruction, ?index:number, ?from_var:Var, ?base:Var, ?attr:Attribute, ?method:Method)
.input StoreInstanceField(IO="file",filename="StoreInstanceField.facts", delimiter="\t")

PAG_Node(?method,?from_var, "Var"),
PAG_Node(?method, ?to_attr, "AttributeField"),
ObjectAttribute(?method, ?base,?attr, ?to_attr,?ins),
PAG(?method, "StoreInstanceField", ?from_var, ?to_attr):-
    StoreInstanceField(?ins,_,?from_var, ?base, ?attr,?method),
    ?base_ex = cat(?base, "."),
    ?to_attr = cat(?base_ex, ?attr).

// Virtual function call
// a = f.foo(); 
// only relevant if function holds parameter or it is an assignment
.decl VirtualMethodInvocation(?ins:Instruction, ?nr:number, ?attr:Attribute, ?var:Var, ?m:Method)
.input VirtualMethodInvocation(IO="file", filename="VirtualMethodInvocation.facts", delimiter="\t")

.decl AssignReturnValue(?ins:Instruction, ?var:Var)
.input AssignReturnValue(IO="file", filename="AssignReturnValue.facts", delimiter="\t")

// eventually it is better to include the function call too
PAG(?method, "VirtualMethodInvocation", ?from_var, ?to_var):-
    VirtualMethodInvocation(?ins, _ ,_, ?from_var, ?method),
    AssignReturnValue(?ins, ?to_var).


// was gehoert nicht in PA ? Parameter v. Funktionen
// Local assignments between two variables
// ex: a = b;
.decl AssignLocal(?instruction:Instruction, ?index:number, ?from_var:Var, ?to_var:Var, ?inmethod:Method)
.input AssignLocal(IO="file", filename="AssignLocal.facts", delimiter="\t")

PAG_Node(?method, ?from_var, "Var"),
PAG_Node(?method, ?to_var, "Var"),
PAG(?method,"AssignLocal",?from_var,?to_var):-
    AssignLocal(_, _, ?from_var, ?to_var, ?method).



// Assignment of parameters when calling a function
// ex: foo(a);
.decl StaticMethodInvocation(ins:Instruction, n: number, m:Method, d: Method)
.input StaticMethodInvocation(IO="file", filename="StaticMethodInvocation.facts", delimiter="\t")

.decl FormalParam(n:number, m:Method, ?param:Var)
.input FormalParam(IO="file",filename="FormalParam.facts", delimiter="\t")

Interprocedural("AssignParameter",?from_meth, ?from_var, ?to_meth, ?to_var),
PAG(?from_meth, "Interprocedural", ?from_var, ?to_var) :-
    ActualParam(?pos, ?from_ins, ?from_var),
    StaticMethodInvocation(?from_ins, _, ?to_meth, ?from_meth),
    FormalParam(?pos, ?to_meth, ?to_var).



// handle return of a static function call
// ex: a = foo()
Interprocedural("AssignReturn",?from_meth, ?from_var, ?to_meth, ?to_var),
PAG(?from_meth,"Interprocedural",?from_var, ?to_var):-
    Return(_,_, ?from_var, ?from_meth),
    AssignReturnValue(?to_ins, ?to_var),
    StaticMethodInvocation(?to_ins, _, ?from_meth, ?to_meth).

.decl MayPredecessorBBModuloThrow(?inst:Instruction, ?inst1:Instruction)
.input MayPredecessorBBModuloThrow(IO="file", filename="MayPredecessorBBModuloThrow.csv", delimiter="\t")

.decl AssignInstanceOf(?ins:Instruction, ?l:number, ?from_var:Var,?to_var:Var,?s:symbol, ?meth:Method)
.input AssignInstanceOf(IO="file", filename="AssignInstanceOf.facts", delimiter="\t")

.decl AssignBinop(?instruction:Instruction, ?index:number, ?to_var:Var, ?inmethod:Method)
.input AssignBinop(IO="file", filename="AssignBinop.facts", delimiter="\t")

.decl AssignCast(?instruction:Instruction, ?index:number, ?from_var:Var, ?to_var:Var, ?type:symbol, ?inmethod:Method)
.input AssignCast(IO="file", filename="AssignCast.facts", delimiter="\t")

.decl AssignCastNull(?instruction:Instruction, ?index:number, ?to_var:Var, ?type:symbol, ?method:Method)
.input AssignCastNull(IO="file", filename="AssignCastNull.facts", delimiter="\t")

.decl AssignCastNumConstant(?instruction:Instruction, ?index:number, ?const:symbol, ?to_var:Var, ?type:symbol, ?inmethod:Method)
.input AssignCastNumConstant(IO="file", filename="AssignCastNumConstant.facts", delimiter="\t")


//.decl AssignInstanceOf(?instruction:Instruction, ?index:number, ?from_var:Var, ?to_var:Var, ?type:symbol, ?inmethod:Method)


.decl ArrayAllocation(?ins:Instruction, ?n:number, ?var:Var)
.input ArrayAllocation(IO="file", filename="ArrayAllocation.facts", delimiter="\t")

.decl AssignNull(?instruction:Instruction, ?index:number, ?to_var:Var, ?method:Method)
.input AssignNull(IO="file", filename="AssignNull.facts", delimiter="\t")

.decl AssignNumConstant(?instruction:Instruction, ?index:number, ?const:symbol, ?to_var:Var, ?inmethod:Method)
.input AssignNumConstant(IO="file", filename="AssignNumConstant.facts", delimiter="\t")

.decl AssignOperFrom(?instruction:Instruction, ?pos: number, ?from_var:Var)
.input AssignOperFrom(IO="file", filename="AssignOperFrom.facts", delimiter="\t")

.decl AssignOperFromConstant(?instruction:Instruction, ?pos: number, ?from_var:symbol)
.input AssignOperFromConstant(IO="file", filename="AssignOperFromConstant.facts", delimiter="\t")

.decl AssignPhantomInvoke(?instruction:Instruction, ?index:number, ?method:Method)
.input AssignPhantomInvoke(IO="file", filename="AssignPhantomInvoke.facts", delimiter="\t")

.decl AssignUnop(?instruction:Instruction, ?index:number, ?to_var:Var, ?inmethod:Method)
.input AssignUnop(IO="file", filename="AssignUnop.facts", delimiter="\t")

.decl LoadArrayIndex(?instruction:Instruction, ?index:number, ?to_var:Var, ?base:Var, ?method:Method)
.input LoadArrayIndex(IO="file", filename="LoadArrayIndex.facts", delimiter="\t")


.decl LoadStaticField(?instruction:Instruction, ?index:number, ?to_var:Var, ?signature:symbol, ?method:Method)
.input LoadStaticField(IO="file", filename="LoadStaticField.facts", delimiter="\t")

.decl Method_FirstInstruction(?method:Method, ?insn:Instruction)
.input Method_FirstInstruction(IO="file", filename="Method_FirstInstruction.csv", delimiter="\t")

.decl ActualParam(?argPos:number, ?ass:Instruction, ?var:Var)
.input ActualParam(IO="file", filename="ActualParam.facts", delimiter="\t")

//auch base -> Use m√∂glich, aber da static field ex. vmtl keine echte Variable


.decl IfVar(?instr:Instruction, ?n: number, ?var:Var)
.input IfVar(IO="file", filename="IfVar.facts", delimiter="\t")

.decl Return(?ins:Instruction, ?n:number, ?var:Var, ?m:Method)
.input Return(IO="file", filename="Return.facts", delimiter="\t")


.decl ArrayInsnIndex(?ins:Instruction, ?var:Var)
.input ArrayInsnIndex(IO="file",filename="ArrayInsnIndex.facts", delimiter="\t")

.decl ExceptionHandler(?handler:symbol, ?method:Method)
.input ExceptionHandler(IO="file", filename="ExceptionHandler.facts")

.decl ExceptionHandlerFormalParam(?handler:Instruction, ?var:Var)
.input ExceptionHandlerFormalParam(IO="file", filename="ExceptionHandler-FormalParam.facts", delimiter="\t")

.decl StoreStaticField(?ins:Instruction, ?l:number, ?var:Var, ?to_var:Var, ?meth:Method)
.input StoreStaticField(IO="file", filename="StoreStaticField.facts", delimiter="\t")

.decl StoreArrayIndex(?ins:Instruction, ?n:number, ?var:Var, ?to_var:Var, ?m:Method)
.input StoreArrayIndex(IO="file", filename="StoreArrayIndex.facts", delimiter="\t")


.decl Throw(?ins:Instruction, ?l:number, ?var:Var,?m:Method)
.input Throw(IO="file", filename="Throw.facts", delimiter="\t")

.decl ExitMonitor(?ins:Instruction, ?l:number,?var:Var, ?m:Method)
.input ExitMonitor(IO="file", filename="ExitMonitor.facts", delimiter="\t")

.decl TableSwitch(?ins:Instruction, ?n:number, ?var:Var, ?meth:Method)
.input TableSwitch(IO="file", filename="TableSwitch.facts", delimiter="\t")

.decl LookupSwitch(?ins:Instruction, ?n:number, ?var:Var, ?meth:Method)
.input LookupSwitch(IO="file", filename="LookupSwitch.facts", delimiter="\t")

.decl Var_DeclaringMethod(?var:Var, ?m:Method)
.input Var_DeclaringMethod(IO="file", filename="Var-DeclaringMethod.facts")




.decl Use(?m:Method, ?t:InsType, ?ins:Instruction, ?var:Var)

.decl Def(?m:Method, ?t:InsType,?ins:Instruction, ?var:Var)

//.output Use
//.output Def
 

 

Use(?method,"LookupSwitch", ?ins,?var):-
    LookupSwitch(?ins,_, ?var,?method).

Use(?method, "TableSwitch",?ins, ?var):-
    TableSwitch(?ins,_,?var,?method).

Use(?method,"ExitMonitor", ?ins,?var):-
    ExitMonitor(?ins,_,?var,?method).

Use(?method,"Throw", ?ins,?var):-
    Throw(?ins,_,?var,?method).

Use(?method,"SpecialMethodInvocation",?ins,?var):- 
    SpecialMethodInvocation(?ins,_,_,?var,?method).

Def(?method,"StoreArrayIndex", ?ins, ?to_var),
Use(?method,"StoreArrayIndex", ?ins,?from_var):-
    StoreArrayIndex(?ins,_, ?from_var, ?to_var, ?method).


Use(?method,"StoreStaticField", ?ins,?from_var):-
    StoreStaticField(?ins,_,?from_var, _, ?method).

Def(?method,"ExceptionHandlerFormalParam", ?ins,?var):-
    ExceptionHandlerFormalParam(?ins,?var),
    ExceptionHandler(?ins,?method).


Use(?method,"AssignInstanceOf", ?ins,?from_var),
Def(?method,"AssignInstanceOf", ?ins,?to_var):-
    AssignInstanceOf(?ins, _,?from_var, ?to_var,_, ?method).

Use(?method,"ArrayInsnIndex", ?ins,?var):-
    ArrayInsnIndex(?ins,?var),
    Var_DeclaringMethod(?var,?method).

Use(?method,"ArrayAllocation", ?ins,?var):-
    ArrayAllocation(?ins,_,?var),
    Var_DeclaringMethod(?var,?method).

Def(?method,"AssignLocal", ?ins, ?to_var):-
    AssignBinop(?ins, _, ?to_var, ?method).

Use(?method,"AssignLocal", ?ins, ?right_oper):-
    AssignOperFrom(?ins,_ ,?right_oper),
    Var_DeclaringMethod(?right_oper, ?method).
//fuegt ggf. Duplikat hinzu, falls z.b. x = y + 1
Def(?method,"AssignLocal", ?ins, ?to_var):-
    AssignBinop(?ins, _, ?to_var, ?method),
    AssignOperFromConstant(?ins,_ ,_).

Use(?method,"AssignCast", ?ins, ?from_var),
Def(?method,"AssignCast", ?ins, ?to_var):-
    AssignCast(?ins, _, ?from_var, ?to_var, _ ,?method).

Def(?method,"AssignCastNull", ?ins, ?to_var):-
    AssignCastNull(?ins, _, ?to_var, _ , ?method).

Def(?method,"AssignCastNumConstant", ?ins, ?to_var):-
    AssignCastNumConstant(?ins,_, _,?to_var,_,?method).

  
//InstanceOf


Def(?method,"AssignNull", ?ins, ?to_var):-
    AssignNull(?ins, _ ,?to_var, ?method).

Def(?method,"AssignNumConstant", ?ins, ?to_var):-
    AssignNumConstant(?ins,_,_,?to_var,?method).

Use(?method,"LoadArrayIndex", ?ins, ?base),
Def(?method,"LoadArrayIndex", ?ins,?to_var):-
    LoadArrayIndex(?ins,_, ?to_var, ?base, ?method).



Def(?method,"AssignUnop", ?ins, ?to_var):-
    AssignUnop(?ins,_, ?to_var, ?method).

Def(?method,"LoadStaticField", ?ins, ?to_var):-
    LoadStaticField(?ins, _, ?to_var, _, ?method).



// if the parameters are used, the value is copied to the actual variable
// i.e. foo(integer a) -> defines a
Use(?to_meth, "AssignLocal", ?to_ins, ?from_var),
Def(?to_meth, "AssignLocal",?to_ins, ?to_var):-
    AssignLocal(?to_ins, _, ?from_var, ?to_var, ?to_meth),
    Def(_ , "AssignMethodParameter", _, ?from_var).


Use(?method,"IfVar", ?ins,?from_var):-
    IfVar(?ins,_,?from_var),
    Var_DeclaringMethod(?from_var,?method).




Use(?method,"StoreInstanceField", ?ins,?to_var),
Def(?method,"StoreInstanceField", ?ins,?to_var),
Use(?method,"StoreInstanceField", ?ins,?from_var):-
    StoreInstanceField(?ins,_,?from_var,?to_var,_,?method).



// ggf. vereinfachung, d.h. AssignBinop etc zu


