// this simple implementation does NOT consider the control flow graph
// i.e. if (){
//           x=1;} 
//       else{
//           x=2;} 
//       y=x; 
// will lead to inconsistencies in the calculation
// thus it is insufficient for real world examples


// own relations:
.decl ConstFolding(a:symbol, c:symbol, b:number,e:symbol)
.decl IntegerConstant(a:symbol, b:number,e:symbol)


// dive into doop-syntax:
// the instrucion-id (?ins) is a unique identifier for each line of intermediate code (IR)
// everything that happens on one IR-line, will be linked with the same instruction-id
// it may look like this: "<Example: void main(java.lang.a:symbol[])>/assign/4"
// where "<Example: void main(java.lang.a:symbol[])>/" is the function signature
// "assign/" means it is an assignment (i.e. a=b;), and "4" is the line number of the statement


//loaded files from doop:

// AssignNumConstant:        contains all variables that hold a constant value (i.e. a = 1) -> this is the base for this analysis
.decl AssignNumConstant(a:symbol, b:number, c:number, d:symbol, e:symbol)
.input AssignNumConstant(IO="file", filename="AssignNumConstant.facts")


// AssignLocal:              holds assignments of type a = b. However we use the filtered version ("AssignLocalNoPhi.facts"), 
.decl AssignLocal(a:symbol, b:number, c:symbol, d:symbol, e:symbol)
.input AssignLocal(IO="file", filename="AssignLocal.facts")


// OperatorAt:               links an instruction-id of a unary or binary expression to its operator
//                           most common operators: (~, +, -, *, /, >=, <=, ==, <<, !=, >, len, <, //, ^, cmp, &, cmpl, cmpg, >>>, >>, |)
.decl OperatorAt(a:symbol,e:symbol)
.input OperatorAt(IO="file", filename="OperatorAt.facts")


// AssignUnop:               holds the instruction-id and variable that is getting assigned by a unary expression
.decl AssignUnop(a:symbol, b:number, c:symbol, e:symbol)
.input AssignUnop(IO="file", filename="AssignUnop.facts")


// AssignBinop:              holds the instruction-id and the variable that is getting assigned by a binary expression
.decl AssignBinop(a:symbol, b:number, c:symbol, e:symbol)
.input AssignBinop(IO="file", filename="AssignBinop.facts")


// AssignOperFrom:           links an instruction-id of a unary or binary expression, to the VARIABLE(S) that are used    
//                           (i.e. a = b + c, will have two entries in AssignOperFrom)
.decl AssignOperFrom(a:symbol, b:number, e:symbol)
.input AssignOperFrom(IO="file", filename="AssignOperFrom.facts")


// AssignOperFromConstant:   links an instruction-id of a unary or binary expression to the CONSTANT(S) used 
//                           (i.e. a = b + 2, will have one entries in AssignOperFromConstant)
.decl AssignOperFromConstant(a:symbol, b:number, c:number)
.input AssignOperFromConstant(IO="file", filename="AssignOperFromConstant.facts")



// Implementation:
// IntegerConstant contains all constants (given & computed)
// it is initialized with all constants that are supplied by doop in AssignNumConstant (i.e. a = 2;)
// ConstFolding will contain all variables and values where constant folding & propagation was successfull
// the doop relations AssignUnop & AssignBinop ONLY contain the instruction-id and the assigned variable 
// -> we need to manually check, if the expression consists of constants (a =  1 + 2;) variables (a = b + c;) or both (a = b + 2;)
//   -> 2 cases for unary expressions:   (- const), (- var)                           
//   -> 3 cases each for binary expressions (+,*): (var + var), (const + const), (const + var)-> order of var & const is irrelevant
//   -> 4 cases each for binary expressions (-, /): (var - var), (const - const), (const - var), (var - const) -> order of var & const is relevant 


// Initialize IntegerConstant with all constants from AssignNumConstant
IntegerConstant(?var, ?val,?meth) :-
    AssignNumConstant(_, _, ?val, ?var, ?meth).

//Assignment without Operator (i.e.  a  = b)
IntegerConstant(?var_to, ?val, ?meth),
ConstFolding(?ins,?var_to, ?val,  ?meth) :-
    AssignLocal(?ins, _, ?var_from, ?var_to, ?meth),
    !contains("phi",?ins),
    IntegerConstant(?var_from, ?val, ?meth).



// Unary-Negation: "-" is translated to "~" in OperatorAt
IntegerConstant(?var, 0 - ?val1, ?meth),
ConstFolding(?ins,?var, 0 - ?val1,  ?meth) :-
    AssignUnop(?ins,_, ?var, ?meth),
    OperatorAt(?ins, ?op),
    ?op = "~",
    AssignOperFrom(?ins, _, ?var1),
    IntegerConstant(?var1, ?val1, ?meth).

IntegerConstant(?var, 0 - ?val1, ?meth),
ConstFolding(?ins,?var, 0 - ?val1,  ?meth) :-
    AssignUnop(?ins,_, ?var, ?meth),
    OperatorAt(?ins, ?op),
    ?op = "~",
    AssignOperFromConstant(?ins, _, ?val1).


// Addition
IntegerConstant(?var, ?val1 + ?val2, ?meth),
ConstFolding(?ins,?var, ?val1 + ?val2,  ?meth) :-
    AssignBinop(?ins,_, ?var, ?meth),
    OperatorAt(?ins, ?op),
    ?op = "+",
    AssignOperFromConstant(?ins, _, ?val1),
    AssignOperFrom(?ins, _, ?var2),
    IntegerConstant(?var2, ?val2,?meth).


IntegerConstant(?var, ?val1 + ?val2, ?meth),
ConstFolding(?ins,?var, ?val1 + ?val2, ?meth) :-
    AssignBinop(?ins,_, ?var, ?meth),
    OperatorAt(?ins, ?op),
    ?op = "+",
    AssignOperFromConstant(?ins, ?pos1, ?val1),
    AssignOperFromConstant(?ins, ?pos2, ?val2),
    ?pos1 < ?pos2.

IntegerConstant(?var, ?val1 + ?val2, ?meth),
ConstFolding(?ins,?var, ?val1 + ?val2,  ?meth) :-
    AssignBinop(?ins,_, ?var, ?meth),
    OperatorAt(?ins, ?op),
    ?op = "+",
    AssignOperFrom(?ins, ?pos1, ?var1),
    AssignOperFrom(?ins, ?pos2, ?var2),
    ?pos1 < ?pos2,
    IntegerConstant(?var1, ?val1, ?meth),
    IntegerConstant(?var2, ?val2,?meth).



// Subtraction

IntegerConstant(?var, ?val1 - ?val2, ?meth),
ConstFolding(?ins,?var, ?val1 - ?val2,  ?meth) :-
    AssignBinop(?ins,_, ?var, ?meth),
    OperatorAt(?ins, ?op),
    ?op = "-",
    AssignOperFromConstant(?ins, ?pos1, ?val1),
    AssignOperFrom(?ins, ?pos2, ?var2),
    ?pos1 < ?pos2, 
    IntegerConstant(?var2, ?val2,?meth).

IntegerConstant(?var, ?val1 - ?val2, ?meth),
ConstFolding(?ins,?var, ?val1 - ?val2,  ?meth) :-
    AssignBinop(?ins,_, ?var, ?meth),
    OperatorAt(?ins, ?op),
    ?op = "-",
    AssignOperFrom(?ins, ?pos1, ?var1),
    IntegerConstant(?var1, ?val1, ?meth),
    AssignOperFromConstant(?ins, ?pos2, ?val2),
    ?pos1 < ?pos2.

IntegerConstant(?var, ?val1 - ?val2, ?meth),
ConstFolding(?ins,?var, ?val1 - ?val2,  ?meth) :-
    AssignBinop(?ins,_, ?var, ?meth),
    OperatorAt(?ins, ?op),
    ?op = "-",
    AssignOperFromConstant(?ins, ?pos1, ?val1),
    AssignOperFromConstant(?ins, ?pos2, ?val2),
    ?pos1 < ?pos2.

IntegerConstant(?var, ?val1 - ?val2, ?meth),
ConstFolding(?ins,?var, ?val1 - ?val2,?meth) :-
    AssignBinop(?ins,_, ?var, ?meth),
    OperatorAt(?ins, ?op),
    ?op = "-",
    AssignOperFrom(?ins, ?pos1, ?var1),
    AssignOperFrom(?ins, ?pos2, ?var2),
    ?pos1 < ?pos2,
    IntegerConstant(?var1, ?val1, ?meth),
    IntegerConstant(?var2, ?val2,?meth).



// Multiplication
IntegerConstant(?var, ?val1 * ?val2, ?meth),
ConstFolding(?ins,?var, ?val1 * ?val2,  ?meth) :-
    AssignBinop(?ins,_, ?var, ?meth),
    OperatorAt(?ins, ?op),
    ?op = "*",
    AssignOperFromConstant(?ins, _, ?val1),
    AssignOperFrom(?ins, _, ?var2),
    IntegerConstant(?var2, ?val2,?meth).

IntegerConstant( ?var, ?val1 * ?val2, ?meth),
ConstFolding(?ins,?var, ?val1 * ?val2,  ?meth) :-
    AssignBinop(?ins,_, ?var, ?meth),
    OperatorAt(?ins, ?op),
    ?op = "*",
    AssignOperFromConstant(?ins, ?pos1, ?val1),
    AssignOperFromConstant(?ins, ?pos2, ?val2),
    ?pos1 < ?pos2.

IntegerConstant(?var, ?val1 * ?val2, ?meth),
ConstFolding(?ins,?var, ?val1 * ?val2,  ?meth) :-
    AssignBinop(?ins,_, ?var, ?meth),
    OperatorAt(?ins, ?op),
    ?op = "*",
    AssignOperFrom(?ins, ?pos1, ?var1),
    AssignOperFrom(?ins, ?pos2, ?var2),
    ?pos1 < ?pos2,
    IntegerConstant(?var1, ?val1, ?meth),
    IntegerConstant(?var2, ?val2,?meth).

// Division

IntegerConstant(?var, ?val1 / ?val2, ?meth),
ConstFolding(?ins,?var, ?val1 / ?val2,  ?meth) :-
    AssignBinop(?ins,_, ?var, ?meth),
    OperatorAt(?ins, ?op),
    ?op = "/",
    AssignOperFromConstant(?ins, ?pos1, ?val1),
    AssignOperFrom(?ins, ?pos2, ?var2),
    ?pos1 < ?pos2, 
    IntegerConstant(?var2, ?val2,?meth).

IntegerConstant(?var, ?val1 / ?val2, ?meth),
ConstFolding(?ins,?var, ?val1 / ?val2,  ?meth) :-
    AssignBinop(?ins,_, ?var, ?meth),
    OperatorAt(?ins, ?op),
    ?op = "/",
    AssignOperFrom(?ins, ?pos1, ?var1),
    IntegerConstant(?var1, ?val1, ?meth),
    AssignOperFromConstant(?ins, ?pos2, ?val2),
    ?pos1 < ?pos2.

IntegerConstant(?var, ?val1 / ?val2, ?meth),
ConstFolding(?ins,?var, ?val1 / ?val2,  ?meth) :-
    AssignBinop(?ins,_, ?var, ?meth),
    OperatorAt(?ins, ?op),
    ?op = "/",
    AssignOperFromConstant(?ins, ?pos1, ?val1),
    AssignOperFromConstant(?ins, ?pos2, ?val2),
    ?pos1 < ?pos2.

IntegerConstant(?var, ?val1 / ?val2, ?meth),
ConstFolding(?ins,?var, ?val1 / ?val2,  ?meth) :-
    AssignBinop(?ins,_, ?var, ?meth),
    OperatorAt(?ins, ?op),
    ?op = "/",
    AssignOperFrom(?ins, ?pos1, ?var1),
    AssignOperFrom(?ins, ?pos2, ?var2),
    ?pos1 < ?pos2,
    IntegerConstant(?var1, ?val1, ?meth),
    IntegerConstant(?var2, ?val2,?meth).


.output ConstFolding
.output IntegerConstant
