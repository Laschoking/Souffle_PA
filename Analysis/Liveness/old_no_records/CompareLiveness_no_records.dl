.type Var <: symbol
.type Method <: symbol
.type Operator <: symbol
.type Instruction <: InsType
.type MethodInv <: symbol
.type InsType <: symbol

.decl Use1(?meth:Method ,?type:InsType, ?ins:Instruction, ?var:Var)
.input Use1(IO="file", filename="Use1.csv", delimiter="\t")

.decl Def1(?meth:Method,?type:InsType, ?ins:Instruction, ?var:Var)
.input Def1(IO="file", filename="Def1.csv", delimiter="\t")

//type can  be either AssignMethodParameter or AssignReturnValue
.decl InterproceduralDefUse1(?from_meth:Method, ?from_type:InsType, ?from_ins:Instruction, ?from_var:Var, ?to_meth:Method,?to_type:InsType, ?to_ins:Instruction, ?to_var:Var)
.input InterproceduralDefUse1(IO="file", filename="InterproceduralDefUse1.csv")

.decl Use2(?meth:Method ,?type:InsType, ?ins:Instruction, ?var:Var)
.input Use2(IO="file", filename="Use2.csv", delimiter="\t")

.decl Def2(?meth:Method ,?type:InsType, ?ins:Instruction, ?var:Var)
.input Def2(IO="file", filename="Def2.csv", delimiter="\t")

.decl InterproceduralDefUse2(?from_meth:Method, ?from_type:InsType, ?from_ins:Instruction, ?from_var:Var, ?to_meth:Method,?to_type:InsType, ?to_ins:Instruction, ?to_var:Var)
.input InterproceduralDefUse2(IO="file", filename="InterproceduralDefUse2.csv")

.decl DataDep1(?meth:Method, ?from_type:InsType, ?from_var:Var, ?to_type:InsType,?to_var:Var)
.output DataDep1 

.decl RootNodes1(?meth:Method, ?type:InsType, ?var:Var)
.output RootNodes1

.decl VarMeth1(var:Var, meth:Method)
.output VarMeth1

.decl VarDep1(?from_var:Var, ?to_var:Var)
.output VarDep1


.decl DataDep2(?meth:Method, ?from_type:InsType, ?from_var:Var, ?to_type:InsType,?to_var:Var)
.output DataDep2 

.decl RootNodes2(?meth:Method, ?type:InsType, ?var:Var)
.output RootNodes2

.decl VarMeth2(var:Var, meth:Method)
.output VarMeth2

.decl VarDep2(?from_var:Var, ?to_var:Var)
.output VarDep2

.decl NrOfDDPred1(?var:Var, n:number)
.decl NrOfDDPred2(?var:Var, n:number)
.output NrOfDDPred1
.output NrOfDDPred2

NrOfDDPred1(?to_var,?c):-
    DataDep1(_,_,_,_, ?to_var),
    ?c = count : {DataDep1(_,_,_,_, ?to_var)}.

NrOfDDPred2(?to_var,?c):-
    DataDep2(_,_,_,_, ?to_var),
    ?c = count : {DataDep2(_,_,_,_, ?to_var)}.


VarMeth1(?var,?meth):-
    Def1(?meth,_,_,?var).

RootNodes1(?meth, ?from_type, ?from_var):-
    DataDep1(?meth, ?from_type,?from_var, _, _),
    !DataDep1(_ , _, _,_,?from_var).

DataDep1(?meth,?from_type,?from_var, ?to_type, ?to_var):-
    Def1(?meth,?from_type, _ , ?from_var),
    Use1(?meth,?to_type, ?ins2, ?from_var),
    Def1(?meth,?to_type, ?ins2 , ?to_var).

DataDep1("Interprocedural", ?from_type, ?from_var, ?to_type, ?to_var):-
    InterproceduralDefUse1(_,?from_type, _, ?from_var, ?to_meth, ?to_type, ?to_ins, ?to_var),
    Use1(?to_meth, ?to_type, ?to_ins, ?from_var),
    Def1(?to_meth, ?to_type, ?to_ins, ?to_var).

VarDep1(?from_var, ?to_var):-
    DataDep1(_,_,?from_var,_,?to_var).


VarMeth2(?var,?meth):-
    Def2(?meth,_,_,?var).

RootNodes2(?meth, ?from_type, ?from_var):-
    DataDep2(?meth, ?from_type,?from_var, _, _),
    !DataDep2(_ , _, _,_,?from_var).

DataDep2(?meth,?from_type,?from_var, ?to_type, ?to_var):-
    Def2(?meth,?from_type, _ , ?from_var),
    Use2(?meth,?to_type, ?ins2, ?from_var),
    Def2(?meth,?to_type, ?ins2 , ?to_var).
// relation InterproceduralDefUse holds the direct connections between 2 vars already
// it handles the mapping of multiple input parameters to a function
DataDep2("Interprocedural", ?from_type, ?from_var, ?to_type, ?to_var):-
    InterproceduralDefUse2(_,?from_type, _, ?from_var, ?to_meth, ?to_type, ?to_ins, ?to_var),
    Use2(?to_meth, ?to_type, ?to_ins, ?from_var),
    Def2(?to_meth, ?to_type, ?to_ins, ?to_var).

VarDep2(?from_var, ?to_var):-
    DataDep2(_,_,?from_var,_,?to_var).

// DataDep2("Interprocedural","Return","<Example: int add(int,int)>/$stack2","AssignReturnValue","<Example: void main(java.lang.String[])>/$stack9")

// the assignment of function parameters does not have an own instruction
// they are just here 
// so we say that they are created in the calling function



// Bei DEF wird immer eine Variable definiert, aber ggf. keine Verwendet
// Bei USE wird immer eine Variable verwendet, aber ggf. keine neue erzeugt


// falls Instructionen vertauscht werden, 채ndert sich Variablenname & Ins
// start bei einem Punkt & verfolgen der kette?

// call mit parametern / ohne ist immer staticInvoke
// obj.foo w채re virtualInvoke 
// obj.init specialInvoke
// ob  R체ckgabewert existiert h채ngt von Formal / Actual parameter ab

// we know that only max. 2 variables can influence one variable 
.decl CommonNodes(meth:Method, ?t:InsType, ?v1:Var, ?v2:Var, ?n:number)
.output CommonNodes
CommonNodes(?meth, ?type, ?from_var, ?to_var,0):-
    RootNodes1(?meth, ?type, ?from_var),
    RootNodes2(?meth, ?type, ?to_var).

CommonNodes(?meth,?to_type, ?to_var1, ?to_var2,?longest_path):-
    CommonNodes(?meth, ?from_type, ?from_var1, ?from_var2,?longest_path),
    DataDep1(?meth,?from_type, ?from_var1, ?to_type, ?to_var1),
    DataDep2(?meth,?from_type, ?from_var2, ?to_type, ?to_var2),
    NrOfDDPred1(?to_var1, 1),
    NrOfDDPred2(?to_var2, 1).

CommonNodes(?meth,?to_type, ?to_var1, ?to_var2,?longest_path):-
    CommonNodes(?meth, ?from_type1, ?from_var11, ?from_var21,?longest_path1),
    CommonNodes(?meth, ?from_type2, ?from_var12, ?from_var22,?longest_path2),
    DataDep1(?meth,?from_type1, ?from_var11, ?to_type, ?to_var1),
    DataDep1(?meth,?from_type2, ?from_var12, ?to_type, ?to_var1),
    NrOfDDPred1(?to_var1, 2),
    NrOfDDPred2(?to_var2, 2),
    DataDep2(?meth,?from_type1, ?from_var21, ?to_type, ?to_var2),
    DataDep2(?meth,?from_type2, ?from_var22, ?to_type, ?to_var2),
    ((?longest_path1 > ?longest_path2,
    ?longest_path  = ?longest_path1 );
    (?longest_path1 <= ?longest_path2,
    ?longest_path  = ?longest_path2)).


// count path doesnt work bc cyclic dependencies