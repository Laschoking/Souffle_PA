.type Var <: symbol
.type Method <: symbol
.type Operator <: symbol
.type Instruction <: symbol
.type MethodInv <: symbol
.type InsType <: symbol
.type Assignment = [m:Method, t:InsType, i:Instruction]
//.type BasicBlock <: Instruction
//.type InsBB = BasicBlock | Instruction


.decl FormalParam(n:number, m:Method, ?param:Var)
.input FormalParam(IO="file",filename="FormalParam.facts", delimiter="\t")

.decl StaticMethodInvocation(ins:Instruction, n: number, m:Method, d: Method)
.input StaticMethodInvocation(IO="file", filename="StaticMethodInvocation.facts", delimiter="\t")

.decl MayPredecessorBBModuloThrow(?inst:Instruction, ?inst1:Instruction)
.input MayPredecessorBBModuloThrow(IO="file", filename="MayPredecessorBBModuloThrow.csv", delimiter="\t")

.decl AssignInstanceOf(?ins:Instruction, ?l:number, ?from_var:Var,?to_var:Var,?s:symbol, ?meth:Method)
.input AssignInstanceOf(IO="file", filename="AssignInstanceOf.facts", delimiter="\t")


.decl AssignBinop(?instruction:Instruction, ?index:number, ?to_var:Var, ?inmethod:Method)
.input AssignBinop(IO="file", filename="AssignBinop.facts", delimiter="\t")

.decl AssignCast(?instruction:Instruction, ?index:number, ?from_var:Var, ?to_var:Var, ?type:symbol, ?inmethod:Method)
.input AssignCast(IO="file", filename="AssignCast.facts", delimiter="\t")

.decl AssignCastNull(?instruction:Instruction, ?index:number, ?to_var:Var, ?type:symbol, ?method:Method)
.input AssignCastNull(IO="file", filename="AssignCastNull.facts", delimiter="\t")

.decl AssignCastNumConstant(?instruction:Instruction, ?index:number, ?const:symbol, ?to_var:Var, ?type:symbol, ?inmethod:Method)
.input AssignCastNumConstant(IO="file", filename="AssignCastNumConstant.facts", delimiter="\t")


.decl AssignHeapAllocation(?instruction:Instruction, ?index:number, ?heap:symbol, ?to_var:Var, ?inmethod:Method, ?linenumber:number)
.input AssignHeapAllocation(IO="file", filename="AssignHeapAllocation.facts", delimiter="\t")


//.decl AssignInstanceOf(?instruction:Instruction, ?index:number, ?from_var:Var, ?to_var:Var, ?type:symbol, ?inmethod:Method)

.decl AssignLocal(?instruction:Instruction, ?index:number, ?from_var:Var, ?to_var:Var, ?inmethod:Method)
.input AssignLocal(IO="file", filename="AssignLocal.facts", delimiter="\t")

.decl ArrayAllocation(?ins:Instruction, ?n:number, ?var:Var)
.input ArrayAllocation(IO="file", filename="ArrayAllocation.facts", delimiter="\t")

.decl AssignNull(?instruction:Instruction, ?index:number, ?to_var:Var, ?method:Method)
.input AssignNull(IO="file", filename="AssignNull.facts", delimiter="\t")

.decl AssignNumConstant(?instruction:Instruction, ?index:number, ?const:symbol, ?to_var:Var, ?inmethod:Method)
.input AssignNumConstant(IO="file", filename="AssignNumConstant.facts", delimiter="\t")

.decl AssignOperFrom(?instruction:Instruction, ?pos: number, ?from_var:Var)
.input AssignOperFrom(IO="file", filename="AssignOperFrom.facts", delimiter="\t")

.decl AssignOperFromConstant(?instruction:Instruction, ?pos: number, ?from_var:symbol)
.input AssignOperFromConstant(IO="file", filename="AssignOperFromConstant.facts", delimiter="\t")

.decl AssignPhantomInvoke(?instruction:Instruction, ?index:number, ?method:Method)
.input AssignPhantomInvoke(IO="file", filename="AssignPhantomInvoke.facts", delimiter="\t")

.decl AssignUnop(?instruction:Instruction, ?index:number, ?to_var:Var, ?inmethod:Method)
.input AssignUnop(IO="file", filename="AssignUnop.facts", delimiter="\t")

.decl LoadArrayIndex(?instruction:Instruction, ?index:number, ?to_var:Var, ?base:Var, ?method:Method)
.input LoadArrayIndex(IO="file", filename="LoadArrayIndex.facts", delimiter="\t")

.decl LoadInstanceField(?instruction:Instruction, ?index:number, ?to_var:Var, ?base:Var, ?signature:symbol, ?method:Method)
.input LoadInstanceField(IO="file", filename="LoadInstanceField.facts", delimiter="\t")

.decl LoadStaticField(?instruction:Instruction, ?index:number, ?to_var:Var, ?signature:symbol, ?method:Method)
.input LoadStaticField(IO="file", filename="LoadStaticField.facts", delimiter="\t")

.decl Method_FirstInstruction(?method:Method, ?insn:Instruction)
.input Method_FirstInstruction(IO="file", filename="Method_FirstInstruction.csv", delimiter="\t")

.decl ActualParam(?argPos:number, ?ass:Instruction, ?var:Var)
.input ActualParam(IO="file", filename="ActualParam.facts", delimiter="\t")

//auch base -> Use m√∂glich, aber da static field ex. vmtl keine echte Variable
.decl AssignReturnValue(?ins:Instruction, ?var:Var)
.input AssignReturnValue(IO="file", filename="AssignReturnValue.facts", delimiter="\t")

.decl VirtualMethodInvocation(?ins:Instruction, ?nr:number, ?method:Method, ?var:Var, ?m:Method)
.input VirtualMethodInvocation(IO="file", filename="VirtualMethodInvocation.facts", delimiter="\t")

.decl IfVar(?instr:Instruction, ?n: number, ?var:Var)
.input IfVar(IO="file", filename="IfVar.facts", delimiter="\t")

.decl Return(?ins:Instruction, ?n:number, ?var:Var, ?m:Method)
.input Return(IO="file", filename="Return.facts", delimiter="\t")

.decl StoreInstanceField(?instruction:Instruction, ?index:number, ?from_var:Var, ?base:Var, ?signature:symbol, ?method:Method)
.input StoreInstanceField(IO="file",filename="StoreInstanceField.facts", delimiter="\t")

.decl ArrayInsnIndex(?ins:Instruction, ?var:Var)
.input ArrayInsnIndex(IO="file",filename="ArrayInsnIndex.facts", delimiter="\t")

.decl ExceptionHandler(?handler:symbol, ?method:Method)
.input ExceptionHandler(IO="file", filename="ExceptionHandler.facts")

.decl ExceptionHandlerFormalParam(?handler:Instruction, ?var:Var)
.input ExceptionHandlerFormalParam(IO="file", filename="ExceptionHandler-FormalParam.facts", delimiter="\t")

.decl StoreStaticField(?ins:Instruction, ?l:number, ?var:Var, ?to_var:Var, ?meth:Method)
.input StoreStaticField(IO="file", filename="StoreStaticField.facts", delimiter="\t")

.decl StoreArrayIndex(?ins:Instruction, ?n:number, ?var:Var, ?to_var:Var, ?m:Method)
.input StoreArrayIndex(IO="file", filename="StoreArrayIndex.facts", delimiter="\t")

.decl SpecialMethodInvocation(?ins:Instruction, ?l:number, ?s:symbol, ?var:Var,?m:Method)
.input SpecialMethodInvocation(IO="file", filename="SpecialMethodInvocation.facts", delimiter="\t")

.decl Throw(?ins:Instruction, ?l:number, ?var:Var,?m:Method)
.input Throw(IO="file", filename="Throw.facts", delimiter="\t")

.decl ExitMonitor(?ins:Instruction, ?l:number,?var:Var, ?m:Method)
.input ExitMonitor(IO="file", filename="ExitMonitor.facts", delimiter="\t")

.decl TableSwitch(?ins:Instruction, ?n:number, ?var:Var, ?meth:Method)
.input TableSwitch(IO="file", filename="TableSwitch.facts", delimiter="\t")

.decl LookupSwitch(?ins:Instruction, ?n:number, ?var:Var, ?meth:Method)
.input LookupSwitch(IO="file", filename="LookupSwitch.facts", delimiter="\t")

.decl Var_DeclaringMethod(?var:Var, ?m:Method)
.input Var_DeclaringMethod(IO="file", filename="Var-DeclaringMethod.facts")



.decl InterproceduralDefUse(from_ass:Assignment, ?from_var:Var, ?to_ass:Assignment, ?to_var:Var)
//.output InterproceduralDefUse(rfc4180=true,delimiter="\t")

.decl Use(a:Assignment, ?var:Var)

.decl Def(a:Assignment, ?var:Var)

.output Use(rfc4180=true,delimiter="\t")
.output Def(rfc4180=true,delimiter="\t")
// reason is that multiple rules with only changed head are still calculated once per head
// even if body is equal
// so helper function to make difficult calculations only once, if Use & Def get entries same rule
.decl AddToDefUse(a:Assignment, v1:Var, v2:Var )
.output AddToDefUse

Use([?method,"LookupSwitch", ?ins],?var):-
    LookupSwitch(?ins,_, ?var,?method).

Use([?method, "TableSwitch",?ins], ?var):-
    TableSwitch(?ins,_,?var,?method).

Use([?method,"ExitMonitor", ?ins],?var):-
    ExitMonitor(?ins,_,?var,?method).

Use([?method,"Throw", ?ins],?var):-
    Throw(?ins,_,?var,?method).

Use([?method,"SpecialMethodInvocation",?ins],?var):- 
    SpecialMethodInvocation(?ins,_,_,?var,?method).

AddToDefUse([?method,"StoreArrayIndex", ?ins],?to_var, ?from_var):-
    StoreArrayIndex(?ins,_, ?from_var, ?to_var, ?method).


Use([?method,"StoreStaticField", ?ins],?from_var):-
    StoreStaticField(?ins,_,?from_var, _, ?method).

Def([?method,"ExceptionHandlerFormalParam", ?ins],?var):-
    ExceptionHandlerFormalParam(?ins,?var),
    ExceptionHandler(?ins,?method).


AddToDefUse([?method,"AssignInstanceOf", ?ins],?to_var, ?from_var):-
    AssignInstanceOf(?ins, _,?from_var, ?to_var,_, ?method).

Use([?method,"ArrayInsnIndex", ?ins],?var):-
    ArrayInsnIndex(?ins,?var),
    Var_DeclaringMethod(?var,?method).

Use([?method,"ArrayAllocation", ?ins],?var):-
    ArrayAllocation(?ins,_,?var),
    Var_DeclaringMethod(?var,?method).

Def([?method,"AssignLocal", ?ins], ?to_var):-
    AssignBinop(?ins, _, ?to_var, ?method).

Use([?method,"AssignLocal", ?ins], ?right_oper):-
    AssignOperFrom(?ins,_ ,?right_oper),
    Var_DeclaringMethod(?right_oper, ?method).
//fuegt ggf. Duplikat hinzu, falls z.b. x = y + 1
Def([?method,"AssignLocal", ?ins], ?to_var):-
    AssignBinop(?ins, _, ?to_var, ?method),
    AssignOperFromConstant(?ins,_ ,_).

AddToDefUse([?method,"AssignCast", ?ins],?to_var, ?from_var):-
    AssignCast(?ins, _, ?from_var, ?to_var, _ ,?method).

Def([?method,"AssignCastNull", ?ins], ?to_var):-
    AssignCastNull(?ins, _, ?to_var, _ , ?method).

Def([?method,"AssignCastNumConstant", ?ins], ?to_var):-
    AssignCastNumConstant(?ins,_, _,?to_var,_,?method).

Def([?method,"AssignHeapAllocation", ?ins], ?to_var):-
    AssignHeapAllocation(?ins, _,_,?to_var, ?method,_ ).
    
//InstanceOf

AddToDefUse([?method,"AssignLocal", ?ins],?to_var, ?from_var):-
    AssignLocal(?ins, _, ?from_var, ?to_var, ?method).

Def([?method,"AssignNull", ?ins], ?to_var):-
    AssignNull(?ins, _ ,?to_var, ?method).

Def([?method,"AssignNumConstant", ?ins], ?to_var):-
    AssignNumConstant(?ins,_,_,?to_var,?method).


AddToDefUse([?method,"LoadArrayIndex", ?ins],?to_var, ?base):-
    LoadArrayIndex(?ins,_, ?to_var, ?base, ?method).

AddToDefUse([?method,"LoadInstanceField", ?ins],?to_var, ?base):-
    LoadInstanceField(?ins, _, ?to_var, ?base,_ , ?method).

Def([?method,"AssignUnop", ?ins], ?to_var):-
    AssignUnop(?ins,_, ?to_var, ?method).

Def([?method,"LoadStaticField", ?ins], ?to_var):-
    LoadStaticField(?ins, _, ?to_var, _, ?method).

Use([?method,"VirtualMethodInvocation", ?ins],?from_var):-
    VirtualMethodInvocation(?ins, _ ,_, ?from_var, ?method).

Use([?method,"IfVar", ?ins],?from_var):-
    IfVar(?ins,_,?from_var),
    Var_DeclaringMethod(?from_var,?method).

//to_var is also in use here, not sure if it makes sense though
Use([?method,"StoreInstanceField", ?ins],?to_var),
AddToDefUse([?method,"StoreInstanceField", ?ins],?to_var, ?from_var):-
    StoreInstanceField(?ins,_,?from_var,?to_var,_,?method).


// definition of parameters officially happens in calling function 
// handle paramter assignment foo(a) so a is used and internal variable parameter0 is defined
//from = callee, to = called function
InterproceduralDefUse([?from_meth, "AssignMethodParameter", ?from_ins], ?from_var, [?to_meth, "AssignMethodParameter", ?from_ins], ?to_var) :-
    ActualParam(?pos, ?from_ins, ?from_var),
    StaticMethodInvocation(?from_ins, _, ?to_meth, ?from_meth),
    FormalParam(?pos, ?to_meth, ?to_var).

// handle the return of variable values at the end of a function call
InterproceduralDefUse([?from_meth,"Return" , ?from_ins],  ?from_var, [?to_meth, "AssignReturnValue", ?to_ins], ?to_var):-
    Return(?from_ins,_, ?from_var, ?from_meth),
    AssignReturnValue(?to_ins, ?to_var),
    StaticMethodInvocation(?to_ins, _, ?from_meth, ?to_meth).


//AddToDefUse(?to_ass, ?to_var, ?from_var):-
//    InterproceduralDefUse(_,?from_var, ?to_ass, ?to_var).

// if the parameters are used, the value is copied to the actual variable
// i.e. foo(integer a) -> defines a

AddToDefUse([?to_meth,"AssignLocal", ?ins],?to_var, ?from_var):-
    AssignLocal(?ins, _, ?from_var, ?to_var, ?to_meth),
    Def(?ass,?from_var),
    ?ass = [_,"AssignMethodParameter",_ ].

Def(?ass, ?to_var),
Use(?ass,?from_var):-
    AddToDefUse(?ass, ?to_var, ?from_var).


